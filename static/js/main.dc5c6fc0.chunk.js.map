{"version":3,"sources":["graphql/query.ts","App.tsx","index.tsx"],"names":["ALL_PEOPLE","gql","App","useQuery","loading","error","data","console","log","undefined","allStarships","map","item","id","name","link","onError","graphQLErrors","networkError","message","locations","path","client","ApolloClient","cache","InMemoryCache","ApolloLink","from","HttpLink","uri","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+KAYaA,GAVeC,cAAH,8HAUCA,cAAH,+H,QCYRC,EApBC,WAAO,IAAD,EACaC,mBAASH,GAAlCI,EADY,EACZA,QAASC,EADG,EACHA,MAAOC,EADJ,EACIA,KAExB,OACE,gCACGF,GAAW,6CACXC,GAAS,0DACTA,GAASE,QAAQC,IAAIH,GAEtB,8CACA,mCACYI,IAATH,GACCA,EAAKI,aAAaC,KAAI,SAACC,EAAWC,GAAZ,OACpB,4BAAaD,EAAKE,MAAVD,YCHZE,EAAOC,aAAQ,YAAsC,IAAnCC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aACjCD,GACFA,EAAcN,KAAI,gBAAGQ,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAWC,EAAvB,EAAuBA,KAAvB,OAChBd,QAAQC,IAAR,oCAC+BW,EAD/B,uBACqDC,EADrD,mBACyEC,OAIzEH,GAAcX,QAAQC,IAAR,2BAAgCU,OAG9CI,EAAS,IAAIC,eAAa,CAC9BC,MAAO,IAAIC,gBACXV,KAAMW,aAAWC,KAAK,CAACZ,EAAM,IAAIa,WAAS,CAAEC,IAflC,0CAkBZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,iBAAD,CAAgBV,OAAQA,EAAxB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,W","file":"static/js/main.dc5c6fc0.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\n\nexport const ALL_STARSHIP = gql`\n  query allStarships {\n    allStarships {\n      starships {\n        name\n      }\n    }\n  }\n`\n\nexport const ALL_PEOPLE = gql`\n  query {\n    allPeople {\n      people {\n        name\n        birthYear\n      }\n    }\n  }\n`","import { useQuery } from '@apollo/client'\nimport { FC } from 'react'\nimport { ALL_PEOPLE } from './graphql/query'\n\nconst App: FC = () => {\n  const { loading, error, data } = useQuery(ALL_PEOPLE)\n\n  return (\n    <div>\n      {loading && <div>Loading...</div>}\n      {error && <div>Error while fetching...</div>}\n      {error && console.log(error)}\n\n      <h2>allStarships</h2>\n      <div>\n        {data !== undefined &&\n          data.allStarships.map((item: any, id: number) => (\n            <p key={id}>{item.name}</p>\n          ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App","import {\n    ApolloClient,\n    ApolloLink,\n    ApolloProvider,\n    HttpLink,\n    InMemoryCache\n  } from '@apollo/client'\n  import { onError } from '@apollo/client/link/error'\n  import React from 'react'\n  import ReactDOM from 'react-dom'\n  import App from './App'\n  \n  const uri = 'https://graphql.org/swapi-graphql'\n  \n  const link = onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors)\n      graphQLErrors.map(({ message, locations, path }) =>\n        console.log(\n          `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n        )\n      )\n  \n    if (networkError) console.log(`[Network error]: ${networkError}`)\n  })\n  \n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: ApolloLink.from([link, new HttpLink({ uri: uri })])\n  })\n  \n  ReactDOM.render(\n    <React.StrictMode>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  )"],"sourceRoot":""}